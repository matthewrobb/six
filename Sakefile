var path = require("path")
var exec = require("child_process").exec

import { 
  readFileSync, 
  readdirSync, 
  writeFileSync, 
  watch
} from "fs"

var launch = (cmd, callback) => {
  var child = exec(cmd, callback)
  child.stdout.pipe(process.stdout)
  child.stderr.pipe(process.stderr)
}

task('compile:six', () => {
  launch('node bin/six -co ./lib ./src')
})

task('watch:six', () => launch('node bin/six -cwo ./lib ./src'))

task('compile', () => {
  invoke('compile:six')
})

task('watch', () => {
  invoke('watch:six')
})

import compile from "./lib/six"

task("build:browser", () => {
  var code = ''

  var modules = [
  
    { path: "./node_modules/esprima-six/esprima.js", names: [ "esprima-six" ] },
    { path: "./node_modules/escodegen/escodegen.js", names: [ "escodegen" ] },
    { path: "./src/es6.six", names: [ "./es6" ] },

    { path: './lib/filters/egal.js', names: [ "./filters/egal" ] },
    { path: './lib/filters/quasi.js', names: [ './filters/quasi' ] },
    { path: './lib/filters/class.js', names: [ './filters/class' ] },
    { path: './src/filters.six', names: [ '../filters' ] },

    { path: './src/esom/rel.six', names: [ './esom/rel', './rel' ] },
    { path: './src/esom/trav.six', names: [ './esom/trav', './trav' ] },
    { path: './src/esom/tree.six', names: [ './esom/tree', './tree' ] },

    { path: './src/hooks/classes.six', names: [ './classes' ] },
    { path: './src/hooks/forof.six', names: [ './forof' ] },
    { path: './src/hooks/objectpattern.six', names: [ './objectpattern' ] },
    { path: './src/hooks/modules.six', names: [ './modules' ] },
    { path: './src/hooks/restparams.six', names: [ './restparams' ] },
    { path: './src/hooks/base.six', names: [ './hooks/base' ] },

    { path: './src/rewriter.six', names: [ './rewriter' ] },
    { path: './src/six.six', names: [ './six' ] },
    { path: './src/browser.six', names: [ './browser' ] }

  ]

  for(var { names, path, src } of modules) {
    code += `
      ${ names.map( name => `require["${ name }"] = ` ).join("") }
      new function(){
        var exports = this;
        ${
          (src = readFileSync(path).toString()) &&
          (src = /six$/.test(path) ? compile(src, { global: true }) : src) ? src : src
        }
      };
    `
  }

  var top = '(function(global) {'
  top += 'var Six = function() {'
  top += 'function require(path){ return require[path] || {}; }'

  code = top + code

  code += 'return require["./six"];'
  code += '}();'
  code += 'if (typeof define === "function" && define.amd) {'
  code += 'define(function() { return Six; });'
  code += '} else {'
  code += 'global.Six = Six;'
  code += '}'
  code += '}(typeof global !== "undefined" ? global : this));'

  writeFileSync('extras/six.js', code)
  console.log("built ...")

})
