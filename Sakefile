var fs = require("fs")
var path = require("path")
var exec = require("child_process").exec

var uglify = require("uglify-js")

var jsp = uglify.parser
var pro = uglify.uglify

var launch = (cmd, callback) => {
  var child = exec(cmd, callback)
  child.stdout.pipe(process.stdout)
  child.stderr.pipe(process.stderr)
}

task('test', () => {
  launch('node node_modules/mocha/bin/mocha')
})

task('compile', () => {
  launch('node bin/six -co ./lib ./src')
})

task('cover', () => {
  launch('node node_modules/cover/bin/cover run node_modules/mocha/bin/_mocha', () => {
    launch('node node_modules/cover/bin/cover report html')
    launch('node node_modules/cover/bin/cover report cli')
  })
})

task("build:browser", () => {
  var code = ''

  var includes = {
    'es6': [ "es6" ],
    'esom/esprima': [ "esprima", "esom/esprima" ],
    'harmonizr': [ "harmonizr" ],
    'helpers': [ "helpers" ],
    
    'filters/egal': [ "filters/egal" ],
    'filters/quasi': [ 'filters/quasi' ],
    'filters/class': [ 'filters/class' ],
    'filters': [ 'filters' ],

    'esom/rel': [ 'esom/rel', 'rel' ],
    'esom/trav': [ 'esom/trav', 'trav' ],
    'esom/tree': [ 'esom/tree', 'tree' ],
    
    'rewriter': [ 'rewriter' ],
    'six': [ 'six' ],
    'browser': [ 'browser' ]
  }

  Object.keys(includes).forEach(file => {
    includes[file].forEach(alias => code += 'require["./' + alias + '"] = ')
    code += 'new function(){'
    code += '  var exports = this;'
    code += '  ' + fs.readFileSync("lib/" + file + ".js")
    code += '};'
  })

  var top = '(function(global) {'
  top += 'var Six = function() {'
  top += 'function require(path){ return require[path]; }'

  code = top + code

  code += 'return require["./six"];'
  code += '}();'
  code += 'if (typeof define === "function" && define.amd) {'
  code += 'define(function() { return Six; });'
  code += '} else {'
  code += 'global.Six = Six;'
  code += '}'
  code += '}(typeof global !== "undefined" ? global : this));'

  fs.writeFileSync('extras/six.js', pro.gen_code(pro.ast_lift_variables(jsp.parse(code))))
  console.log("built ...")

})

task('watch', () => {
  invoke('watch:six')
  invoke('watch:dot')
})

task('watch:six', () => launch('node bin/six -cwo ./lib ./src'))

task('watch:dot', () => {
  var dot = require("dot")

  dot.templateSettings = {
    evaluate:    /\{\{([\s\S]+?)\}\}/g,
    interpolate: /\{\{=([\s\S]+?)\}\}/g,
    encode:      /\{\{!([\s\S]+?)\}\}/g,
    use:         /\{\{#([\s\S]+?)\}\}/g,
    define:      /\{\{##\s*([\w\.$]+)\s*(\:|=)([\s\S]+?)#\}\}/g,
    conditional: /\{\{\?(\?)?\s*([\s\S]*?)\s*\}\}/g,
    iterate:     /\{\{~\s*(?:\}\}|([\s\S]+?)\s*\:\s*([\w$]+)\s*(?:\:\s*([\w$]+))?\s*\}\})/g,
    varname: 'it',
    strip: true,
    append: true,
    selfcontained: true
  }

  var filterPath = __dirname + "/src/filters/"
  var filterOut = __dirname + "/lib/filters/"

  fs.watch(filterPath, (event, filename) => {

    fs.readdirSync(filterPath).forEach(file => {
      if (path.extname(file) === ".dot") {
        var source = fs.readFileSync(filterPath + file).toString()
        source = "exports.filter = " + dot.template(source).toString()
        fs.writeFileSync(filterOut + file.replace(".dot", ".js"), source, 'utf8')
      }
    })

  })

})
