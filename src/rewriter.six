require("./es6")

import Tree from "./esom/tree"
module hooks = "./hooks/base"

// A cache of hooks that can be run in a single pass.
var visitors = {}

// Push applicable hooks into visitor pass.
function optimizeHooks() {
  var sels = Object.keys(hooks)
  var optimizable = /^\.[a-zA-Z]+$/
  for (var sel of sels) {
    if (optimizable.exec(sel)) {
      visitors[sel.substring(1)] = hooks[sel]
      delete hooks[sel]
    }
  }
}

optimizeHooks()

export function rewrite(src, options) {
  var program = Tree.create(src, options)

  for(var { selector: key, hook: value } of hooks) {
    program.root.select(selector).forEach(hook)
  }

  program.root.visitByType(visitors)

  return program.compile()
}

Object.define(Tree.prototype, {

  compile () {
    var src = typeof this.raw === "function" ? this.raw() : this.raw

    this.children.reverse().forEach(child => {
      var raw = typeof child.raw === "function" ? child.raw() : child.raw
      var start = src.indexOf(raw)
      var end = start + raw.length
      src = src.substring(0, start) + child.compile() + src.substring(end)
    })

    return src
  },

  context() {
    var ctx = new Context(this)
    return ctx
  }

})

class Context {

  constructor(node) {
    var stack = Object.create(node)
    var parent

    Object.define(stack, node.ast)
    Object.define(stack, {
      node,
      get parent() {
        parent ? parent : node.parent ? (parent = node.parent.context()) : undefined
      }
    })

    if (stack.hasOwnProperty("loc")) delete stack['loc']

    node.children.forEach(child => {
      var ctx
      Object.defineProperty(stack, child.key, {
        get() ctx ? ctx : (ctx = child.context()),
        enumerable: true
      })
    })

    return stack
  }

}
