import existsSync from "fs"
import sep from "path"

var hooks = {
  ".ModuleDeclaration": node => {
    var compile = node.compile
    node.compile = () => {
      var ret = "var "
      var ctx = node.context()
      var from = ctx.from

      if (! from)
        return compile.call(node)

      if (from.type is 'Literal') {
        // import directly from file
        var modRoot = from.value
        return `var ${ctx.id.name} = require("${modRoot}");`
      }
      else {
        var modRoot = from.compile()
        return `var ${ctx.id.name} = ${modRoot};`
      }
    }
  },
  ".ImportDeclaration": node => {
    node.compile = () => {
      var ret = "var "
      var ctx = node.context()
      var from = ctx.from

      if (from.type is 'Literal') {
        // import directly from file
        var modRoot = from.value
        var modVarName = modRoot.replace(/[\/\.]/g, '_')
        modRoot = `require("${modRoot}")`
      }
      else {
        // the only other valid text here is a namespace path
        from = from.context().body.node
        var modNames = from.children.map(path => path.name)
        var modVarName = modNames.join("_")
        var modRoot = from.compile()
      }

      var specifiers = ctx.specifiers.node.children

      if (specifiers.length is 1) {
        modVarName = modRoot
      }
      else {
        ret += `${modVarName} = ${modRoot}`
      }

      specifiers.forEach(spec => {
        if (specifiers.length > 1)
          ret += ', '

        var ctx = spec.context()
        if (ctx.type is "ImportSpecifier") {
          var name = ctx.id.name
          var from = ctx.from ? ctx.from.node.children[0].ast[0].name : name

          ret += `${from} = ${modVarName}.${name}`
        }
        else {
          ret += `${ctx.name} = ${modVarName}.${ctx.name}`
        }
      })

      return ret + ";";
    }
  },
  ".ExportDeclaration": node => {
    node.compile = () => {
      var declaration = node.context().declaration
      if (! declaration) {
        var ret = ''
        node.context().specifiers.node.children.forEach(value => {
          var name = value.context().id.name
          ret += `exports.${name} = ${name};`
        })
        return ret
      }

      var exportee = declaration.context()
      switch (exportee.type) {
        case "FunctionDeclaration":
          var name = exportee.id.name
          // test params[0] as when empty it is an array, otherwise an object
          return `var ${name} = exports.${name} = function(` +
           (exportee.params[0] ? exportee.params.compile() : '') +
           `) ${exportee.body.compile()};\n`
        case "VariableDeclaration":
          var ret = ''
          exportee.declarations.children.forEach((value, idx) => {
            var declaration = value.context()
            var name = declaration.id.name
            ret += `var ${name} = exports.${name} = ` +
              (declaration.init ? declaration.init.compile() : 'null') + ";\n"
          })
          return ret
        case "ModuleDeclaration":
          var from = exportee.from
          if (from) {
            var name = exportee.id.name
            if (from.type is 'Literal') {
              // import directly from file
              var modRoot = from.value
              return `var ${name} = exports.${name} = require("${modRoot}");`
            }
            else {
              var modRoot = fromcompile()
              return `var ${name} = exports.${name} = ${modRoot};`
            }
          }
          // TODO
        default:
          // should be unreachable but fallthrough in case the standard changes
          return node.context().declaration.compile()
      }
    }
  }
}

Object.define(exports, hooks)
