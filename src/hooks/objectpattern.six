var hooks = {

  ".VariableDeclarator > id.ObjectPattern": node => {
    node.properties = () => {
      var ctx = node.parent.context()
      var props = []

      ctx.id.properties.node.children.forEach(child => {
        var prop = child.context()
        var key = prop.key.compile()
        var value = prop.value.compile()
        props.push({ key, value })
      })

      return props
    }

    node.assemble = (init) => {
      var ctx = node.parent.context()
      var props = node.properties()
      var result = ""

      if (!ctx.init || (!ctx.init.matches(".Identifier") && props.length > 1)) {
        var first = props.shift()
        result += `${first.key} = ${init}, `
        props.push(first)
        init = first.key
      }

      props = props.map((prop, index) => `${prop.key} = ${init}.${prop.value}`)

      return `${result}${props.join(", ")}`
    }

    node.parent.compile = () => node.assemble(node.parent.context().init.compile())
  }

}

Object.define(exports, hooks)