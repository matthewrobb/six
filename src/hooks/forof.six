var hooks = {

  ".ForOfStatement": node => {
    node.compile = () => {
      var context = node.context()
      var right = context.right.compile()
      var body = context.body.compile().replace(/^{([\s\S]*)}$/, "$1")
      var dec = context.left.matches(".VariableDeclaration[kind='var']")
      var decs = []
      var left = dec ? context.left.declarations.node.first().context() : context.left.node.context()

      if (left.type === "Identifier" || (left.id && left.id.type === "Identifier")) {
        decs.push(left.compile())
        left = `${left.compile()} = _iterator.next()`
      } else if (left.type === "VariableDeclarator" && left.id.type === "ObjectPattern") {
        left.select(".ObjectPattern").forEach(node => {
          decs = decs.concat(node.properties().map(prop=>prop.key))
          left = node.assemble("_iterator.next()")
        })
      } else {
        left = `(${left.compile()})`
      }

      return `
        ${ dec ? "var " + decs.join(", ") + ";" : "" }
        void function(_iterator){
          try {
            while (true) {
              ${ left }
              ${ body }
            }
          } catch (e) { if (e !== StopIteration ) throw e }
        }.call(this, ${ right }.iterator());
      `
    }
  }
  
}

Object.define(exports, hooks)