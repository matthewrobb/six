var { generate } = require("escodegen")
var { filters } = require("../filters")

function iterator() {
  return {
    elements: Object.keys(this).map(key => ({ key, value: this[key] })),
    index: 0,
    next() {
      if (this.index >= this.elements.length)
        throw StopIteration
      return this.elements[this.index++]
    }
  }
}

var hooks = {

  ".Program": node => {
    var compile = node.compile
    node.compile = () => {
      var src = compile.call(node)
      return generate(node.constructor.create(src).ast, {
        format: {
          indent: {
            style: '  ',
            base: 0
          },
          quotes: "double",
          compact: false
        },
        comment: true
      })
    }
  },

  ".ArrowFunctionExpression": node => {
    node.compile = ()=> {
      var ctx = node.context()
      var params = ctx.params.compile ? ctx.params.compile() : ""
      var body = ctx.body.compile(), body = ctx.expression ? `{return ${body}}` : body
      return `function(${params})${body}.bind(this)`
    }
  },

  ".Property[method=true]": node => {
    node.compile = () => {
      var ctx = node.context()
      var key = ctx.key.compile()
      var value = ctx.value
      var params = value.params && value.params.compile ? value.params.compile() : ""
      var body = value.body.compile(), body = value.expression ? `{return ${body}}`: body

      return `${key}:function(${params})${body}`
    }
  },

  ".BinaryExpression[operator^='is']": node => {
    node.compile = () => filters.egal(node)
  },

  ".TemplateLiteral": node => {
    node.compile = () => filters.quasi(node.context())
  }

}

Array.prototype.map.call([

  hooks,
  "./classes",
  "./forof",
  "./objectpattern"

],

hook => {
  Object.define(exports, typeof hook === "string" ? require(hook) : hook ) 
})

Object.defineProperty(exports, "iterator", {
  value: iterator,
  enumerable: false
})