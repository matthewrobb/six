module esprima = "esprima-six-jpike";

var parse = esprima.parse;
var Syntax = esprima.Syntax;

export class Tree {

  constructor(source, options) {
    var ast = parse(source, { range: true, })
    var children = []

    this.root = this
    this.source = source
    this.ast = ast
    this.children = children

    children.push(this.create({ ast, key: 'root', type: 'Node' }))

    var node = children[0]
    node.global = options && options.global
    node.strict = options && options.strict
    return node
  }

  create (base) {
    var node = Object.create(this.root)
    var parent = this
    var children = []

    Object.define(node, base)

    node.climb(child => {
      
      if (child.type === 'Node' || (child.type === "NodeSet" && child.ast.length)) {
        if (child.type === "NodeSet") {
          child.ast.range = [child.ast[0].range[0], child.ast[child.ast.length - 1].range[1]]
        }
        children.push(node.create(child))
      }
    })

    node.ast = base.ast
    node.parent = parent
    node.children = children

    Object.define(node, {
      unshift(node) { children.unshift(node) },
      push(node) { children.push(node) }
    })

    return node
  }

  climb (visit) {
    var node = this.ast
    Object.keys(node).forEach(key => {
      var ast = node[key], type

      if (ast && typeof ast === 'object' && key !== "range") {
        type = (ast.type) ? "Node" : Array.isArray(ast) ? "NodeSet" : "Unknown"
        visit({ key, ast, type })
      }

    })
  }

  visitByType (typeCallbacks) {
    this.children.forEach(child => {
      if (! child.ast) {
        return
      }

      var callback = typeCallbacks[child.ast.type]
      if (callback) {
        callback(child)
      }

      child.visitByType(typeCallbacks)
    })
  }

  raw() { return this.source.substring(this.ast.range[0], this.ast.range[1]) }
  isRoot() { return this.parent === this.root }
  path() { return this.isRoot() ? "" : this.parent.path + "." + this.key }

}

Object.define(Tree, {
  create(src, options) new this(src, options)
})

Object.define(Tree.prototype, require("./trav").Traversal)
